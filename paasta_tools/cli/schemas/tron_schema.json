{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "tron on paasta yaml (docs todo)",
    "type": "object",
    "definitions": {
        "name": {
            "type": "string",
            "pattern": "^[A-Za-z_][\\w\\-]{0,254}$"
        },
        "time_delta": {
            "type": "string",
            "pattern": "^\\d+\\s*[a-z]+$"
        },
        "action": {
            "type": "object",
            "additionalProperties": false,
            "required": [
                "command"
            ],
            "properties": {
                "name": {
                    "$ref": "#definitions/name"
                },
                "command": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#definitions/name"
                },
                "requires": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "retries": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": false
                },
                "retries_delay": {
                    "$ref": "#definitions/time_delta"
                },
                "executor": {
                    "enum": [
                        "ssh",
                        "paasta",
                        "spark"
                    ]
                },
                "cpus": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "cpu_burst_add": {
                    "type": "number",
                    "minimum": 0.0,
                    "exclusiveMinimum": false
                },
                "cap_add": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mem": {
                    "type": "number",
                    "minimum": 32,
                    "exclusiveMinimum": true
                },
                "disk": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "constraints": {
                    "type": "array",
                    "items": {
                        "type": "array"
                    },
                    "uniqueItems": true
                },
                "extra_constraints": {
                    "type": "array",
                    "items": {
                        "type": "array"
                    },
                    "uniqueItems": true
                },
                "service": {
                    "type": "string"
                },
                "deploy_group": {
                    "type": "string"
                },
                "pool": {
                    "type": "string"
                },
                "iam_role": {
                    "type": "string"
                },
                "iam_role_provider": {
                    "enum": [
                        "aws"
                    ]
                },
                "node_selectors": {
                    "type": "object",
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[a-zA-Z0-9]+[a-zA-Z0-9-_./]*[a-zA-Z0-9]+$": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "uniqueItems": true
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "operator": {
                                                        "enum": [
                                                            "In",
                                                            "NotIn"
                                                        ]
                                                    },
                                                    "values": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "uniqueItems": true
                                                    }
                                                },
                                                "required": [
                                                    "operator",
                                                    "values"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "operator": {
                                                        "enum": [
                                                            "Exists",
                                                            "DoesNotExist"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "operator"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "operator": {
                                                        "enum": [
                                                            "Gt",
                                                            "Lt"
                                                        ]
                                                    },
                                                    "value": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "operator",
                                                    "value"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                },
                "env": {
                    "type": "object",
                    "patternProperties": {
                        "^[a-zA-Z_]+[a-zA-Z0-9_]*$": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                },
                "boto_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extra_volumes": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "uniqueItems": true
                },
                "cluster": {
                    "type": "string"
                },
                "expected_runtime": {
                    "$ref": "#definitions/time_delta"
                },
                "triggered_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "trigger_downstreams": {
                    "type": [
                        "object",
                        "boolean"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "on_upstream_rerun": {
                    "type": "string"
                },
                "trigger_timeout": {
                    "$ref": "#definitions/time_delta"
                },
                "aws_credentials": {
                    "$comment": "we should eventually get rid of this once we move spark to pod identity - that said, this should be just the filename sans extension",
                    "type": "string",
                    "pattern": "[-a-zA-z0-9_]"
                },
                "spark_args": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                        "spark.cores.max": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.driver.cores": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.kubernetes.driver.request.cores": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.executor.instances": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.executor.cores": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.kubernetes.executor.request.cores": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.executor.memory": {
                            "type": "string",
                            "pattern": "^[1-9]+[0-9]*[kmg]$"
                        },
                        "spark.driver.memory": {
                            "type": "string",
                            "pattern": "^[1-9]+[0-9]*[kmg]$"
                        },
                        "spark.driver.memoryOverhead": {
                            "$comment": "we still need to validate this in code since there's a spark-enforced minimum of 384mb",
                            "oneOf": [
                                {
                                    "type": "string",
                                    "pattern": "^[1-9]+[0-9]*[kmg]$"
                                },
                                {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                }
                            ]
                        },
                        "spark.executor.memoryOverhead": {
                            "$comment": "we still need to validate this in code since there's a spark-enforced minimum of 384mb",
                            "oneOf": [
                                {
                                    "type": "string",
                                    "pattern": "^[1-9]+[0-9]*[kmg]$"
                                },
                                {
                                    "type": "number",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                }
                            ]
                        },
                        "spark.driver.maxResultSize": {
                            "type": "string",
                            "pattern": "^[1-9]+[0-9]*[kmg]$"
                        },
                        "spark.scheduler.minRegisteredResourcesRatio": {
                            "type": "number",
                            "minimum": 0,
                            "exclusiveMinimum": true,
                            "maximum": 1
                        },
                        "spark.scheduler.maxRegisteredResourcesWaitingTime": {
                            "type": "string",
                            "pattern": "^[1-9]+[0-9]*(s|min)$"
                        },
                        "spark.kubernetes.allocation.batch.size": {
                            "type": "integer"
                        },
                        "spark.kubernetes.memoryOverheadFactor": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 1,
                            "exclusiveMinimum": false,
                            "exclusiveMaximum": false
                        },
                        "spark.hadoop.fs.s3a.multiobjectdelete.enable": {
                            "type": "boolean"
                        },
                        "spark.app.name": {
                            "type": "boolean"
                        },
                        "spark.task.maxFailures": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "spark.stage.maxConsecutiveAttempts": {
                            "type": "integer"
                        },
                        "spark.sql.broadcastTimeout": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.sql.autoBroadcastJoinThreshold": {
                            "oneOf": [
                                {
                                    "$comment": "this is just a silly way to express that we want a non-zero integer or -1",
                                    "enum": [
                                        -1
                                    ]
                                },
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "exclusiveMinimum": true
                                }
                            ]
                        },
                        "spark.sql.parquet.enableVectorizedReader": {
                            "type": "boolean"
                        },
                        "spark.sql.shuffle.partitions": {
                            "type": "integer",
                            "minimum": 0,
                            "exclusiveMinimum": true
                        },
                        "spark.default.parallelism": {
                            "type": "integer"
                        },
                        "spark.local.dir": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "job": {
            "type": "object",
            "required": [
                "schedule",
                "actions"
            ],
            "additionalProperties": false,
            "properties": {
                "use_k8s": {
                    "type": "boolean"
                },
                "name": {
                    "$ref": "#definitions/name"
                },
                "node": {
                    "$ref": "#definitions/name"
                },
                "schedule": {
                    "type": [
                        "string",
                        "object"
                    ]
                },
                "actions": {
                    "type": [
                        "array",
                        "object"
                    ],
                    "items": {
                        "$ref": "#definitions/action"
                    },
                    "patternProperties": {
                        ".+": {
                            "$ref": "#definitions/action"
                        }
                    }
                },
                "cluster": {
                    "type": "string"
                },
                "monitoring": {
                    "type": "object",
                    "properties": {
                        "issuetype": {
                            "type": "string"
                        },
                        "team": {
                            "type": "string"
                        },
                        "runbook": {
                            "type": "string"
                        },
                        "page": {
                            "type": "boolean"
                        },
                        "tip": {
                            "type": "string"
                        },
                        "notification_email": {
                            "type": [
                                "string",
                                "boolean",
                                "null"
                            ]
                        },
                        "realert_every": {
                            "type": "integer",
                            "minimum": -1,
                            "exclusiveMinimum": false
                        },
                        "dependencies": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "irc_channels": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "slack_channels": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ticket": {
                            "type": "boolean"
                        },
                        "project": {
                            "type": "string"
                        },
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "component": {
                            "type": [
                                "string",
                                "array"
                            ]
                        },
                        "description": {
                            "type": "string"
                        },
                        "alert_after": {
                            "type": "string"
                        },
                        "check_that_every_day_has_a_successful_run": {
                            "type": "boolean"
                        },
                        "page_for_expected_runtime": {
                            "type": "boolean"
                        },
                        "priority": {
                            "type": "string"
                        },
                        "check_oom_events": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": false
                },
                "queueing": {
                    "type": "boolean"
                },
                "allow_overlap": {
                    "type": "boolean"
                },
                "run_limit": {
                    "type": "integer",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "all_nodes": {
                    "type": "boolean"
                },
                "cleanup_action": {
                    "$ref": "#definitions/action"
                },
                "enabled": {
                    "type": "boolean"
                },
                "max_runtime": {
                    "$ref": "#definitions/time_delta"
                },
                "expected_runtime": {
                    "$ref": "#definitions/time_delta"
                },
                "time_zone": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "deploy_group": {
                    "type": "string"
                }
            }
        }
    },
    "patternProperties": {
        "^_.*$": {
            "type": "object",
            "additionalProperties": true
        },
        "^[^_].*$": {
            "$ref": "#definitions/job"
        }
    }
}
