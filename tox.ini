[tox]
skipsdist=True
envlist=py310-linux
docker_compose_version = 1.26.2
requires =
    tox==3.28.0


[testenv]
basepython = python3.10
passenv = SSH_AUTH_SOCK PAASTA_ENV DOCKER_HOST CI
deps =
    --only-binary=grpcio
    --requirement={toxinidir}/requirements.txt
    --requirement={toxinidir}/requirements-dev.txt
    --editable={toxinidir}
commands =
    # these are only available at yelp so we optionally install them so that internal devs don't need to
    # manually do so (through pip or make)
    # that said, most of the time people will run make test which will use tox to install these in a
    # faster way - so this is really just here for anyone that like to just invoke
    # `tox` directly and with no explicit env
    -pip install -r yelp_package/extra_requirements_yelp.txt

[testenv:dev-api]
envdir = .tox/py310-linux/
passenv = PAASTA_TEST_CLUSTER KUBECONFIG PAASTA_SYSTEM_CONFIG_DIR KUBECONTEXT AWS_PROFILE
deps =
    --only-binary=grpcio
    --requirement={toxinidir}/requirements.txt
    --requirement={toxinidir}/requirements-dev.txt
    --requirement={toxinidir}/yelp_package/extra_requirements_yelp.txt
    --editable={toxinidir}
commands =
    python -m paasta_tools.run-paasta-api-in-dev-mode

[testenv:playground-api]
envdir = .tox/py310-linux/
passenv = PAASTA_TEST_CLUSTER KUBECONFIG PAASTA_SYSTEM_CONFIG_DIR PAASTA_API_SOA_DIR USER
setenv =
    KUBECONFIG = ./k8s_itests/kubeconfig
    PAASTA_TEST_CLUSTER = kind-{env:USER}-k8s-test
    PAASTA_SYSTEM_CONFIG_DIR = ./etc_paasta_playground/
    PAASTA_API_SOA_DIR = ./soa_config_playground
deps =
    --only-binary=grpcio
    --requirement={toxinidir}/requirements.txt
    --requirement={toxinidir}/requirements-dev.txt
    --requirement={toxinidir}/yelp_package/extra_requirements_yelp.txt
    --editable={toxinidir}
commands =
    python -m paasta_tools.run-paasta-api-playground

[testenv:tests]
envdir = .tox/py310-linux/
commands =
    check-requirements -vv
    pre-commit install -f --install-hooks
    pre-commit run --all-files
    mypy -p paasta_tools
    coverage erase
    coverage run -m py.test {posargs:tests}
    coverage report -m

[testenv:tests-yelpy]
envdir = .tox/py310-linux/
setenv =
    PIP_INDEX_URL = http://169.254.255.254:20641/simple/
deps =
    --only-binary=grpcio
    --requirement={toxinidir}/requirements.txt
    --requirement={toxinidir}/requirements-dev.txt
    --requirement={toxinidir}/yelp_package/extra_requirements_yelp.txt
    --editable={toxinidir}
whitelist_externals = bash
commands =
    check-requirements -vv
    pre-commit install -f --install-hooks
    bash -c 'pre-commit run --all-files || (if [[ $HOSTNAME =~ dev.* ]]; then echo "Re-running pre-commit since this is a dev box"; pre-commit run --all-files; else false; fi)'
    mypy -p paasta_tools
    coverage erase
    coverage run -m py.test {posargs:tests}
    coverage report -m

[testenv:docs]
deps =
    --requirement={toxinidir}/requirements-docs.txt
commands =
    /bin/rm -rf docs/source/generated/
    # The last arg to apidoc is a list of excluded paths
    sphinx-apidoc -f -e -o docs/source/generated/ paasta_tools
    python -m sphinx -T -b html -d docs/build/doctrees -D language=en docs/source docs/build/html

[testenv:k8s_itests]
basepython = python3.10
whitelist_externals = bash
# one day we'll use a fully pinned venv here...
deps =
setenv =
passenv =
    KIND_CLUSTER
    KUBECONFIG
    KUBECONTEXT
    PAASTA_SYSTEM_CONFIG_DIR
    SOA_DIR
    PAASTA_API_PORT
    KUBE_RESOURCE_DIR
    USER
    PAASTA_CONFIG_DIR
    DOCKER_TLS_VERIFY
    DOCKER_HOST
    DOCKER_CERT_PATH
    INDEX_URL_BUILD_ARG
changedir=k8s_itests/
commands =
    # Requires system Docker Compose V2 (`docker compose` CLI) to be installed and available in PATH.
    # Fail fast if Docker Compose V2 is not available
    docker compose --version
    # Build /etc/paasta used by docker compose
    {toxinidir}/k8s_itests/scripts/setup.sh
    # Run paasta-tools k8s_itests in docker
    docker compose down
    docker compose --verbose build --parallel --build-arg DOCKER_REGISTRY={env:DOCKER_REGISTRY:docker-dev.yelpcorp.com/} --build-arg {env:INDEX_URL_BUILD_ARG:UNUSED}=https://pypi.org/simple
    docker compose up \
        --abort-on-container-exit

[testenv:example_cluster]
changedir=example_cluster/
passenv = DOCKER_TLS_VERIFY DOCKER_HOST DOCKER_CERT_PATH INDEX_URL_BUILD_ARG
deps =
    docker-compose=={[tox]docker_compose_version}
commands =
    docker-compose down
    docker-compose --verbose build --build-arg DOCKER_REGISTRY={env:DOCKER_REGISTRY:docker-dev.yelpcorp.com/} --build-arg PIP_INDEX_URL={env:PIP_INDEX_URL:https://pypi.yelpcorp.com/simple}
    # Fire up the mesos cluster in background
    # Run the paastatools container in foreground to catch the output
    # the `docker-compose run` vs `docker-compose up` is important here, as docker-compose run will
    # exit with the right code.
    #
    # dnephin says we need the --rm otherwise these containers won't be cleaned
    # up. I guess we only need this for run'd containers, not up'd containers?
    # IDK, the docs don't really specify.
    docker-compose run --rm playground ./example_cluster/example-cluster-test.sh
    docker-compose stop
    docker-compose rm --force

[testenv:general_itests]
basepython = python3.10
setenv =
    PAASTA_SYSTEM_CONFIG_DIR = {toxinidir}/general_itests/fake_etc_paasta
changedir=general_itests/
passenv = DOCKER_TLS_VERIFY DOCKER_HOST DOCKER_CERT_PATH DOCKER_REGISTRY
deps =
    {[testenv]deps}
    behave==1.2.5
commands =
    # TODO: upgrade behave if they ever take this reasonable PR
    # starting from setuptools >= 58.0.0, use_2to3 wont be supported
    # as behave includes use_2to3 in setup.py, it will fail to install
    pip install git+https://github.com/Yelp/behave@luisp/1.2.5-issue_533-fork-updates
    pylint -E {toxinidir}/paasta_tools/mesos/ --ignore master.py,task.py
    behave {posargs}

[testenv:install-hooks]
basepython = python3.10
deps =
    pre-commit
commands = pre-commit install -f --install-hooks

[flake8]
max-line-length = 120
extend-ignore = E501,E203,W503

[pep8]
ignore = E265,E501
